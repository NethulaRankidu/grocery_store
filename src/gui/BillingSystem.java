/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import backend.ComboItem;
import backend.ConnectionManager;
import static backend.InvoicePrinter.generateInvoice;
import backend.ProductDAO;
import backend.ProductDAO.StockBatchDetails;
import backend.Session;
import backend.StockBatchItem;
import com.formdev.flatlaf.FlatLightLaf;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;
import java.util.List;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/**
 *
 * @author Nethula
 */
public class BillingSystem extends javax.swing.JFrame {

    /**
     * Creates new form MainMenu
     */
    public BillingSystem() {
        initComponents();
        loadCustomersIntoComboBox();
        setTableDefault();
        
        JFormattedTextField txt1 = ((JSpinner.NumberEditor) QtySpinner.getEditor()).getTextField();
        txt1.addFocusListener(new java.awt.event.FocusAdapter() {
            @Override
            public void focusLost(java.awt.event.FocusEvent e) {
                try {
                    txt1.commitEdit(); // Commit the user's typed input
                } catch (java.text.ParseException ex) {
                    QtySpinner.setValue(0); // Reset to 0 if invalid
                }
            }
        });
        
        JFormattedTextField txt2 = ((JSpinner.NumberEditor) GivenMoneySpinner.getEditor()).getTextField();
        txt2.addFocusListener(new java.awt.event.FocusAdapter() {
            @Override
            public void focusLost(java.awt.event.FocusEvent e) {
                try {
                    txt2.commitEdit(); // Commit the user's typed input
                } catch (java.text.ParseException ex) {
                    GivenMoneySpinner.setValue(0); // Reset to 0 if invalid
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Title = new javax.swing.JLabel();
        BackButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ProductTable = new javax.swing.JTable();
        barcodeTextField = new javax.swing.JTextField();
        barcodeLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        QtyUpdateDetails = new javax.swing.JButton();
        StockUpdateDetails = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        StockComboBox = new javax.swing.JComboBox<>();
        CurrentTotalLabel = new javax.swing.JLabel();
        ProductNameLabel = new javax.swing.JLabel();
        StockDateLabel = new javax.swing.JLabel();
        RemAfterBuyLabel = new javax.swing.JLabel();
        UnitPriceLabel = new javax.swing.JLabel();
        AddEntryButton = new javax.swing.JButton();
        barcodeLabel1 = new javax.swing.JLabel();
        CustomerComboBox = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        ChangeLabel = new javax.swing.JLabel();
        CalculateButton = new javax.swing.JButton();
        QtySpinner = new javax.swing.JSpinner();
        GivenMoneySpinner = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Title.setFont(new java.awt.Font("Segoe UI Semibold", 0, 36)); // NOI18N
        Title.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Title.setText("Billing System");

        BackButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        BackButton.setText("‚Üê Back ");
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });

        ProductTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        ProductTable.setPreferredSize(new java.awt.Dimension(450, 1000));
        jScrollPane1.setViewportView(ProductTable);

        barcodeTextField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        barcodeTextField.setToolTipText("Type the product barcode here");

        barcodeLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        barcodeLabel.setText("Product Barcode");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Qty");

        QtyUpdateDetails.setText("Update Details");
        QtyUpdateDetails.setToolTipText("Click to update details after selecting stock");
        QtyUpdateDetails.setPreferredSize(new java.awt.Dimension(75, 25));
        QtyUpdateDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QtyUpdateDetailsActionPerformed(evt);
            }
        });

        StockUpdateDetails.setText("Update Details");
        StockUpdateDetails.setToolTipText("Update the details after typing the barcode");
        StockUpdateDetails.setPreferredSize(new java.awt.Dimension(75, 25));
        StockUpdateDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StockUpdateDetailsActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Stock");

        StockComboBox.setToolTipText("Select the stock from here");
        StockComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StockComboBoxActionPerformed(evt);
            }
        });

        CurrentTotalLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        CurrentTotalLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        CurrentTotalLabel.setText("Current Total: Rs. 0.00");
        CurrentTotalLabel.setToolTipText("Current Total Label");

        ProductNameLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        ProductNameLabel.setText("Product Name:");

        StockDateLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        StockDateLabel.setText("Stock Date:");

        RemAfterBuyLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        RemAfterBuyLabel.setText("Remaining (After Buy):");

        UnitPriceLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        UnitPriceLabel.setText("Unit Price:");

        AddEntryButton.setText("Add Entry");
        AddEntryButton.setToolTipText("Click to add entry of the given item");
        AddEntryButton.setPreferredSize(new java.awt.Dimension(75, 25));
        AddEntryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddEntryButtonActionPerformed(evt);
            }
        });

        barcodeLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        barcodeLabel1.setText("Customer ");

        CustomerComboBox.setToolTipText("Select a customer from the combo box");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel11.setText("Given Money:");

        jButton6.setText("Print");
        jButton6.setToolTipText("adds the data to the database and shows the bill");
        jButton6.setPreferredSize(new java.awt.Dimension(75, 25));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        ChangeLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        ChangeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        ChangeLabel.setText("Change: Rs. 0.00");
        ChangeLabel.setToolTipText("Change Label");

        CalculateButton.setText("Calculate");
        CalculateButton.setToolTipText("Used to calculate after inputting the money");
        CalculateButton.setPreferredSize(new java.awt.Dimension(75, 25));
        CalculateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalculateButtonActionPerformed(evt);
            }
        });

        QtySpinner.setToolTipText("Select the number you want to buy");
        QtySpinner.setPreferredSize(new java.awt.Dimension(64, 26));

        GivenMoneySpinner.setModel(new javax.swing.SpinnerNumberModel(0.0d, null, null, 0.01d));
        GivenMoneySpinner.setToolTipText("The money given by the customer");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BackButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(CurrentTotalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ChangeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(barcodeLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CustomerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(barcodeTextField)
                            .addComponent(barcodeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(StockDateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RemAfterBuyLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                            .addComponent(UnitPriceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(AddEntryButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(QtyUpdateDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(QtySpinner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(StockComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(StockUpdateDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CalculateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ProductNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(GivenMoneySpinner))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BackButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(barcodeLabel)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(barcodeLabel1)
                        .addComponent(CustomerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(411, 411, 411)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ChangeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(CalculateButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(CurrentTotalLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(barcodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(StockUpdateDetails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(7, 7, 7)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(StockComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addGap(4, 4, 4)
                                .addComponent(QtySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(QtyUpdateDetails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ProductNameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(UnitPriceLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(StockDateLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(RemAfterBuyLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(AddEntryButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel11)
                                .addGap(31, 31, 31))
                            .addComponent(GivenMoneySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    // Helper method to hide a column
    private void setAllValuesAsDefault(){
        // Clearing the table
        setTableDefault();
        
        // Barcode
        barcodeTextField.setText("");
        
        // Stock
        StockComboBox.removeAllItems();
        
        // Customer Combo Box
        CustomerComboBox.removeAllItems();
        loadCustomersIntoComboBox();
        
        // Qty
        QtySpinner.setValue(0);
        
        // Labels
        ProductNameLabel.setText("Product Name: ");
        UnitPriceLabel.setText("Unit Price: ");
        StockDateLabel.setText("Stock Date: ");
        RemAfterBuyLabel.setText("Remaining (After Buy): ");
        
        // Given Money
        GivenMoneySpinner.setValue(0);
        
        // Total and Change Label
        CurrentTotalLabel.setText("Current Label: Rs. 0.00");
        ChangeLabel.setText("Change: Rs. 0.00");
    }
    
    private void setTableDefault(){
        ProductTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        DefaultTableModel model = new DefaultTableModel(
            new Object[][]{},
            new String[]{"Barcode", "Product Name", "Unit Price", "Qty", "Amount", "Del", "product_id", "batch_id"}
        );
        ProductTable.setModel(model);
        hideColumn(ProductTable, 6); // product_id column index
        hideColumn(ProductTable, 7); // batch_id column index
        
        // Optional: Set column renderer & editor for "Del" button
        ProductTable.getColumn("Del").setCellRenderer(new ButtonRenderer());
        ProductTable.getColumn("Del").setCellEditor(new ButtonEditor(new JCheckBox()));
    }
    
    private void hideColumn(JTable table, int colIndex) {
        TableColumn column = table.getColumnModel().getColumn(colIndex);
        column.setMinWidth(0);
        column.setMaxWidth(0);
        column.setWidth(0);
        column.setPreferredWidth(0);
    }
    
    private void AddEntryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddEntryButtonActionPerformed
        try {
            // Get selected values
            String barcode = barcodeTextField.getText();
            StockBatchItem selectedBatch = (StockBatchItem) StockComboBox.getSelectedItem();
            int qty = (int) QtySpinner.getValue();

            ProductDAO dao = new ProductDAO();
            StockBatchDetails details = dao.getStockBatchDetailsById(selectedBatch.getBatchId());

            double unitPrice = details.unitPrice;
            double amount = unitPrice * qty;
            int product_id = details.productId;

            // Prepare table model
            DefaultTableModel model = (DefaultTableModel) ProductTable.getModel();


            // Create delete button
            JButton deleteButton = new JButton("Del");
            deleteButton.addActionListener(e -> {
                int row = ProductTable.convertRowIndexToModel(ProductTable.getEditingRow());
                model.removeRow(row);
                updateCurrentTotal();
            });

            // Add row
            model.addRow(new Object[]{
                barcode,
                details.productName,
                String.format("%.2f", unitPrice),
                qty,
                String.format("%.2f", amount),
                "üóëÔ∏è",
                product_id,
                selectedBatch.getBatchId()
            });

            updateCurrentTotal();

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error adding entry: " + e.getMessage());
        }
    }//GEN-LAST:event_AddEntryButtonActionPerformed

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed
        // TODO add your handling code here:
        DashBoard dashboard = new DashBoard();  // or any other JFrame
        dashboard.setVisible(true);

        // Close the current frame
        this.dispose(); // closes the frame that this button is part of
    }//GEN-LAST:event_BackButtonActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        ComboItem customer = (ComboItem) CustomerComboBox.getSelectedItem();
        
        
        if(customer.getValue() == 0){
            JOptionPane.showMessageDialog(null, "Please Select a Customer", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }else if(barcodeTextField.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Please Input a valid Barcode", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }else if(QtySpinner.getValue().equals(0)){
            JOptionPane.showMessageDialog(null, "Please Select a Quantity", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
       
        saveBillToDatabase(Session.userId, customer.getValue());
        
        setAllValuesAsDefault();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void CalculateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalculateButtonActionPerformed
        // TODO add your handling code here:
        try {
            // Step 1: Get total from the table
            double total = 0.0;
            DefaultTableModel model = (DefaultTableModel) ProductTable.getModel();

            for (int i = 0; i < model.getRowCount(); i++) {
                double amount = Double.parseDouble(model.getValueAt(i, 4).toString()); // Column 4 = Amount
                total += amount;
            }

            // Step 2: Get given money from spinner
            double given = ((Number) GivenMoneySpinner.getValue()).doubleValue();

            // Step 3: Calculate change
            double change = given - total;

            // Step 4: Show change (with 2 decimal places)
            ChangeLabel.setText(String.format("Change: Rs. %.2f", change));

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error calculating change: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_CalculateButtonActionPerformed

    private void StockComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StockComboBoxActionPerformed

        StockBatchItem selected = (StockBatchItem) StockComboBox.getSelectedItem();

        if (selected != null) {
            int availableQty = selected.getRemainingItems(); // this must be stored in StockBatchItem

            // Create a new Spinner model with updated max quantity
            SpinnerNumberModel qtyModel = new SpinnerNumberModel(1, 1, availableQty, 1);
            QtySpinner.setModel(qtyModel);
        }
    }//GEN-LAST:event_StockComboBoxActionPerformed

    private void StockUpdateDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StockUpdateDetailsActionPerformed
        // TODO add your handling code here:
        String barcode = barcodeTextField.getText();
        ProductDAO dao = new ProductDAO();
        Integer productId = dao.getProductIdByBarcode(barcode);

        if (productId != null) {
            List<StockBatchItem> stockBatches = dao.getStockBatchesByProductId(productId);

            StockComboBox.removeAllItems(); // Clear previous items

            if (stockBatches.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No stock available for this product.", "Stock Info", JOptionPane.INFORMATION_MESSAGE);
            } else {
                for (StockBatchItem item : stockBatches) {
                    StockComboBox.addItem(item);
                }
            }
        }
    }//GEN-LAST:event_StockUpdateDetailsActionPerformed

    private void QtyUpdateDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QtyUpdateDetailsActionPerformed
        // TODO add your handling code here:
        // 1. Get selected stock batch from combo box
        StockBatchItem selectedBatch = (StockBatchItem) StockComboBox.getSelectedItem();
        if (selectedBatch == null) {
            JOptionPane.showMessageDialog(this, "Please select a stock batch first.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // 2. Get quantity from spinner
        int selectedQty = (int) QtySpinner.getValue();

        // 3. Get stock batch details from DAO (product name, unit price, stock date, remaining)
        ProductDAO dao = new ProductDAO();
        StockBatchDetails details = dao.getStockBatchDetailsById(selectedBatch.getBatchId());

        if (details == null) {
            JOptionPane.showMessageDialog(this, "Could not find stock batch details.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // 4. Calculate remaining after buy
        int remainingAfterBuy = details.remainingItems - selectedQty;

        // 5. Update labels
        ProductNameLabel.setText("Product Name: " + details.productName);
        UnitPriceLabel.setText("Unit Price: " + details.unitPrice);
        StockDateLabel.setText("Stock Date: " + details.stockDate);
        RemAfterBuyLabel.setText("Remaining (After Buy): " + remainingAfterBuy);
    }//GEN-LAST:event_QtyUpdateDetailsActionPerformed

    public void loadCustomersIntoComboBox() {
        String sql = "SELECT customer_id, name FROM customer";

        try (Connection conn = ConnectionManager.getConnection();
            PreparedStatement ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery()) {
        
            CustomerComboBox.removeAllItems();
            CustomerComboBox.addItem(new ComboItem(0, "Select Customer"));
            while (rs.next()) {
                int id = rs.getInt("customer_id");
                String name = rs.getString("name");
                System.out.println("‚Üí " + id + ": " + name);
                CustomerComboBox.addItem(new ComboItem(id, "[" + id + "] " + name ));
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error loading Customers: " + e.getMessage());
        } 
    }
    
    public void updateCurrentTotal() {
        DefaultTableModel model = (DefaultTableModel) ProductTable.getModel();
        double total = 0.0;

        for (int i = 0; i < model.getRowCount(); i++) {
            String amountStr = model.getValueAt(i, 4).toString();
            total += Double.parseDouble(amountStr);
        }

        CurrentTotalLabel.setText("Current Total: Rs. " + String.format("%.2f", total));
    }
    
    public class ButtonRenderer extends JButton implements TableCellRenderer {
        public ButtonRenderer() {
            setOpaque(true);
        }

        public Component getTableCellRendererComponent(JTable table, Object value,
            boolean isSelected, boolean hasFocus, int row, int column) {
            setText((value == null) ? "Del" : value.toString());
            return this;
        }
    }
    
    public static class ButtonEditor extends DefaultCellEditor {
        protected JButton button;
        private String label;
        private boolean clicked;
        private JTable table;

        public ButtonEditor(JCheckBox checkBox) {
            super(checkBox);
            button = new JButton("Del");
            button.setOpaque(true);
            
            // Set custom text and font
            button.setText("DelÔ∏è");
            button.setForeground(Color.WHITE);
            button.setBackground(Color.RED); // Optional for red "Remove" button

            button.addActionListener(e -> {
                fireEditingStopped();
                int row = table.getSelectedRow();
                ((DefaultTableModel) table.getModel()).removeRow(row);
                // Call method in BillingSystem to update total
                ((BillingSystem) SwingUtilities.getWindowAncestor(table)).updateCurrentTotal();
            });
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value,
                boolean isSelected, int row, int column) {
            this.table = table;
            label = (value == null) ? "Del" : value.toString();
            button.setText(label);
            clicked = true;
            return button;
        }

        @Override
        public Object getCellEditorValue() {
            return label;
        }

        @Override
        public boolean stopCellEditing() {
            clicked = false;
            return super.stopCellEditing();
        }

        @Override
        protected void fireEditingStopped() {
            super.fireEditingStopped();
        }
    }
    
    public void saveBillToDatabase(int cashierId, int customerId) {
        DefaultTableModel model = (DefaultTableModel) ProductTable.getModel();
        int rowCount = model.getRowCount();

        if (rowCount == 0) {
            JOptionPane.showMessageDialog(null, "No products in the bill.");
            return;
        }

        Connection conn = null;
        try {
            conn = ConnectionManager.getConnection();
            conn.setAutoCommit(false);

            // Step 1: Calculate total price
            double totalPrice = 0;
            for (int i = 0; i < rowCount; i++) {
                totalPrice += Double.parseDouble(model.getValueAt(i, 4).toString()); // Amount
            }

            // Step 2: Insert into bill table
            String insertBill = "INSERT INTO bill (cashier_id, customer_id, datetime, total_price) VALUES (?, ?, NOW(), ?)";
            PreparedStatement billStmt = conn.prepareStatement(insertBill, Statement.RETURN_GENERATED_KEYS);
            billStmt.setInt(1, cashierId);
            billStmt.setInt(2, customerId);
            billStmt.setDouble(3, totalPrice);
            billStmt.executeUpdate();

            ResultSet rs = billStmt.getGeneratedKeys();
            if (!rs.next()) throw new SQLException("Failed to retrieve generated bill_id");
            int billId = rs.getInt(1);

            // Step 3: Prepare sold_items insert
            String insertSold = "INSERT INTO sold_items (bill_id, product_id, stock_id, quantity, unit_price) VALUES (?, ?, ?, ?, ?)";
            PreparedStatement soldStmt = conn.prepareStatement(insertSold);

            // Step 4: Prepare batch update
            String updateBatch = "UPDATE product_batches SET remaining_items = remaining_items - ?, bought_items = bought_items + ? WHERE batch_id = ?";
            PreparedStatement batchStmt = conn.prepareStatement(updateBatch);

            for (int i = 0; i < rowCount; i++) {
                int productId = Integer.parseInt(model.getValueAt(i, 6).toString()); // product_id
                int batchId = Integer.parseInt(model.getValueAt(i, 7).toString());   // batch_id
                int qty = Integer.parseInt(model.getValueAt(i, 3).toString());       // Qty
                double unitPrice = Double.parseDouble(model.getValueAt(i, 2).toString()); // Unit Price

                // Insert into sold_items
                soldStmt.setInt(1, billId);
                soldStmt.setInt(2, productId);
                soldStmt.setInt(3, batchId);
                soldStmt.setInt(4, qty);
                soldStmt.setDouble(5, unitPrice);
                soldStmt.addBatch();

                // Update stock
                batchStmt.setInt(1, qty); // Subtract from remaining
                batchStmt.setInt(2, qty); // Add to bought_items
                batchStmt.setInt(3, batchId);
                batchStmt.addBatch();
            }

            soldStmt.executeBatch();
            batchStmt.executeBatch();

            conn.commit();

            JOptionPane.showMessageDialog(null, "Bill saved successfully! Bill ID: " + billId);
            generateInvoice(billId);

            // Optional: clear the table or prepare for next transaction
        } catch (SQLException e) {
            try {
                if (conn != null) conn.rollback();
            } catch (SQLException rollbackEx) {
                rollbackEx.printStackTrace();
            }
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error saving bill: " + e.getMessage());
        } finally {
            try {
                if (conn != null) conn.setAutoCommit(true);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        FlatLightLaf.setup();

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BillingSystem().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddEntryButton;
    private javax.swing.JButton BackButton;
    private javax.swing.JButton CalculateButton;
    private javax.swing.JLabel ChangeLabel;
    private javax.swing.JLabel CurrentTotalLabel;
    private javax.swing.JComboBox<ComboItem> CustomerComboBox;
    private javax.swing.JSpinner GivenMoneySpinner;
    private javax.swing.JLabel ProductNameLabel;
    private javax.swing.JTable ProductTable;
    private javax.swing.JSpinner QtySpinner;
    private javax.swing.JButton QtyUpdateDetails;
    private javax.swing.JLabel RemAfterBuyLabel;
    private javax.swing.JComboBox<StockBatchItem> StockComboBox;
    private javax.swing.JLabel StockDateLabel;
    private javax.swing.JButton StockUpdateDetails;
    private javax.swing.JLabel Title;
    private javax.swing.JLabel UnitPriceLabel;
    private javax.swing.JLabel barcodeLabel;
    private javax.swing.JLabel barcodeLabel1;
    private javax.swing.JTextField barcodeTextField;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
